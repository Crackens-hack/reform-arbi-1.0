import os  # M√≥dulo para interactuar con variables de entorno del sistema
import pymysql  # Cliente MySQL para Python
import pandas as pd  # Biblioteca para manipulaci√≥n de datos en estructuras tipo DataFrame

# ‚öôÔ∏è Configuraci√≥n de la conexi√≥n a la base de datos usando variables de entorno
DB_CONFIG = {
    "host": os.getenv("DB_HOST", "localhost"),        # Direcci√≥n del host, por defecto 'localhost'
    "user": os.getenv("DB_USER", "root"),             # Usuario de la base, por defecto 'root'
    "password": os.getenv("DB_PASSWORD", ""),         # Contrase√±a del usuario, por defecto cadena vac√≠a
    "database": os.getenv("DB_NAME", ""),             # Nombre de la base, por defecto cadena vac√≠a
    "charset": "utf8mb4",                             # Charset usado, para soportar caracteres especiales
    "cursorclass": pymysql.cursors.DictCursor,        # Cursor que devuelve resultados en formato diccionario
}

# üß© Se establece la conexi√≥n a la base con los datos anteriores
connection = pymysql.connect(**DB_CONFIG)
cursor = connection.cursor()  # Se obtiene un cursor para ejecutar queries

# üì• Consulta: se extraen los s√≠mbolos disponibles con sus pares base y quote
cursor.execute("SELECT symbol, base, quote FROM kraken_funcional")
rows = cursor.fetchall()  # Se obtienen todos los resultados
df = pd.DataFrame(rows)  # Se convierte en un DataFrame de Pandas para facilitar la manipulaci√≥n

# üî¢ Se cuenta la cantidad total de s√≠mbolos originales
total_original = len(df)
print(f"üîç Total de s√≠mbolos en kraken_funcional: {total_original}")

# üßÆ Clasificaci√≥n de los pares seg√∫n su relaci√≥n con USDT:
# - directos: pares donde el quote es USDT (ej: BTC/USDT)
# - invertidos: pares donde el base es USDT (ej: USDT/BTC)
# - indirectos: pares donde ni el base ni el quote es USDT
directo = df[df['quote'] == 'USDT']
invertido = df[df['base'] == 'USDT']
indirecto = df[(df['base'] != 'USDT') & (df['quote'] != 'USDT')]

# üõ†Ô∏è Funci√≥n para crear y poblar una tabla con los datos correspondientes
def manejar_tabla(nombre_tabla, datos):
    # üß® Borra la tabla si ya exist√≠a, para evitar conflictos
    cursor.execute(f"DROP TABLE IF EXISTS {nombre_tabla}")
    
    # ‚úÖ Si hay datos, se crea y se insertan las filas
    if not datos.empty:
        # üß± Se crea la estructura de la tabla
        cursor.execute(
            f"""
            CREATE TABLE {nombre_tabla} (
                symbol VARCHAR(50),
                base VARCHAR(20),
                quote VARCHAR(20)
            )
            """
        )
        # ‚ûï Se insertan todos los registros fila por fila
        for _, row in datos.iterrows():
            cursor.execute(
                f"INSERT INTO {nombre_tabla} (symbol, base, quote) VALUES (%s, %s, %s)",
                (row['symbol'], row['base'], row['quote'])
            )
    else:
        # ‚ö†Ô∏è Si el DataFrame est√° vac√≠o, se notifica que no se crea la tabla
        print(f"‚ö†Ô∏è Tabla vac√≠a: {nombre_tabla}, no se cre√≥.")

# üöÄ Se ejecuta la funci√≥n para cada uno de los tres tipos de cotizaci√≥n
manejar_tabla("cotizador_directo", directo)
manejar_tabla("cotizador_invertido", invertido)
manejar_tabla("cotizador_indirecto", indirecto)

# üíæ Se confirman los cambios en la base de datos
connection.commit()

# üìä Conteo de registros por categor√≠a para verificar que no se perdi√≥ ning√∫n s√≠mbolo
cant_directo = len(directo)
cant_invertido = len(invertido)
cant_indirecto = len(indirecto)
total_final = cant_directo + cant_invertido + cant_indirecto

# üìà Se imprimen los resultados
print(f"‚úî cotizador_directo: {cant_directo}")
print(f"‚úî cotizador_invertido: {cant_invertido}")
print(f"‚úî cotizador_indirecto: {cant_indirecto}")
print(f"üìä Total distribuido: {total_final}")

# ‚úÖ Validaci√≥n final: se compara el total original con el total final
if total_original == total_final:
    print("‚úÖ Todos los s√≠mbolos fueron clasificados correctamente.")
else:
    print("‚ùå ERROR: Hay s√≠mbolos que no se clasificaron correctamente.")

# üîö Se cierra el cursor y la conexi√≥n a la base de datos
cursor.close()
connection.close()

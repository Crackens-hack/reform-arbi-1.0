# /app/dev/bash/.bash_prompt

BASHDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
[ -f "$BASHDIR/.bash_gitprompt" ] && . "$BASHDIR/.bash_gitprompt"

BR_COLOR="\[\e[1;32m\]"   # verde fuerte (rama)
RESET="\[\e[0m\]"

_git_ps1_loaded=false
for p in \
  /usr/share/git/git-prompt.sh \
  /usr/lib/git-core/git-sh-prompt \
  /usr/share/git-core/contrib/completion/git-prompt.sh \
  /usr/share/git/completion/git-prompt.sh
do
  if [ -f "$p" ]; then
    . "$p"
    _git_ps1_loaded=true
    break
  fi
done

_git_fallback_segment() {
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    local b
    b="$(git branch --show-current 2>/dev/null)"
    [ -z "$b" ] && b="$(git rev-parse --short HEAD 2>/dev/null)"
    [ -n "$b" ] && printf " (%s%s%s)" "$BR_COLOR" "$b" "$RESET"
  else
    printf ""   # fuera de repo ‚Üí nada
  fi
}

_git_ps1_segment() { __git_ps1 " (${BR_COLOR}%s${RESET})"; }

_git_segment() {
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    if [ "$_git_ps1_loaded" = true ] && type __git_ps1 >/dev/null 2>&1; then
      _git_ps1_segment
    else
      _git_fallback_segment
    fi
  else
    printf ""
  fi
}

# >>> Builder que se ejecuta en cada prompt
_bash_ps1_refresh() {
  case "$-" in *i*) ;; *) return ;; esac  # solo interactiva

  if [[ -n "$CONTAINER" ]]; then
    local CN_NAME="${NAME:-$HOSTNAME}"
    PS1="üê≥ (\[\e[1;36m\]$CN_NAME\[\e[0m\]) \u@\h:\W$(_git_segment)\n\$ "
  else
    PS1="\u@\h:\W$(_git_segment)\n\$ "
  fi
}
